From 6ef89345ea92e86c372bb11b9c930e81c9ea8b4e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fr=C3=A9d=C3=A9ric=20Pierret=20=28fepitre=29?=
 <frederic.pierret@qubes-os.org>
Date: Sat, 16 May 2020 11:38:04 +0200
Subject: [PATCH 1/8] Qubes decoration

Authors:
@marmarek

Original work done in:
- QubesOS/qubes-desktop-linux-xfce4
- QubesOS/qubes-desktop-linux-xfce4-xfwm4
---
 src/client.c     | 136 +++++++++++++++++++++----
 src/client.h     |   2 +
 src/display.h    |   1 +
 src/events.c     |  12 ++-
 src/frame.c      | 182 +++++++++++++++++++---------------
 src/frame.h      |   8 +-
 src/moveresize.c |   4 +-
 src/mypixmap.c   |  35 ++++++-
 src/mypixmap.h   |   3 +-
 src/placement.c  |   4 +-
 src/screen.c     |  34 +------
 src/screen.h     |  24 +++--
 src/settings.c   | 251 +++++++++++++++++++++++++++++------------------
 src/settings.h   |  32 ++++++
 14 files changed, 484 insertions(+), 244 deletions(-)

diff --git a/src/client.c b/src/client.c
index 2b8506626..fd7a1e550 100644
--- a/src/client.c
+++ b/src/client.c
@@ -196,6 +196,93 @@ clientUpdateColormaps (Client *c)
     }
 }
 
+static void
+getQubesLabel (Client *c)
+{
+    ScreenInfo *screen_info;
+    DisplayInfo *display_info;
+    Atom atom_label;
+
+    screen_info = c->screen_info;
+    display_info = screen_info->display_info;
+
+    atom_label = XInternAtom(display_info->dpy, "_QUBES_LABEL", TRUE);
+
+    if (atom_label == 0) {
+        c->qubes_label_color = QUBES_LABEL_DOM0;
+    } else {
+        Atom actual_type;
+        int actual_format;
+        unsigned long nitems = 0, bytes_left;
+        char *data = 0;
+
+        if ((XGetWindowProperty (display_info->dpy, c->window, atom_label, 0L, 1L,
+                        FALSE, AnyPropertyType, &actual_type, &actual_format, &nitems,
+                        &bytes_left, (unsigned char **) &data) == Success))
+        {
+            if (nitems != 1) {
+                // ERROR? Only Dom0 Windows don't have this property set...
+                c->qubes_label_color = QUBES_LABEL_DOM0;
+            } else {
+                int qubes_label = (int)*data;
+                if (qubes_label >= 0 && qubes_label < MAX_QUBES_LABELS) {
+                    c->qubes_label_color = qubes_label_colors[qubes_label];
+                } else {
+                    /* out of range?! */
+                    c->qubes_label_color = QUBES_LABEL_RED;
+                }
+            }
+        } else {
+            c->qubes_label_color = QUBES_LABEL_DOM0;
+        }
+    }
+}
+
+static void
+getQubesVmName (Client *c)
+{
+    ScreenInfo *screen_info;
+    DisplayInfo *display_info;
+    Atom atom_vmname;
+
+    screen_info = c->screen_info;
+    display_info = screen_info->display_info;
+
+    if (c->qubes_vmname)
+        return;
+
+    atom_vmname = XInternAtom(display_info->dpy, "_QUBES_VMNAME", TRUE);
+
+    if (atom_vmname == 0) {
+        c->qubes_vmname = g_strdup("[Dom0] ");
+    } else {
+        Atom actual_type;
+        int actual_format;
+        unsigned long nitems = 0, bytes_left;
+        char *data = 0;
+
+        if ((XGetWindowProperty (display_info->dpy, c->window, atom_vmname, 0L, 0L,
+                        FALSE, AnyPropertyType, &actual_type, &actual_format, &nitems,
+                        &bytes_left, (unsigned char **) &data) == Success))
+        {
+            if (bytes_left > 0) {
+                if ((XGetWindowProperty (display_info->dpy, c->window, atom_vmname, 0L, bytes_left,
+                                FALSE, AnyPropertyType, &actual_type, &actual_format, &nitems,
+                                &bytes_left, (unsigned char **) &data) == Success))
+                {
+                    c->qubes_vmname = g_strdup_printf (_("[%s] "), data);
+                } else {
+                    c->qubes_vmname = g_strdup (_("[ERROR Reading VM name?!] "));
+                }
+            } else {
+                c->qubes_vmname = g_strdup("[Dom0] ");
+            }
+        } else {
+            c->qubes_vmname = g_strdup("[Dom0] ");
+        }
+    }
+}
+
 static gchar*
 clientCreateTitleName (Client *c, gchar *name, gchar *hostname)
 {
@@ -209,14 +296,16 @@ clientCreateTitleName (Client *c, gchar *name, gchar *hostname)
     screen_info = c->screen_info;
     display_info = screen_info->display_info;
 
+    getQubesVmName (c);
+
     if (strlen (hostname) && (display_info->hostname) && (g_ascii_strcasecmp (display_info->hostname, hostname)))
     {
         /* TRANSLATORS: "(on %s)" is like "running on" the name of the other host */
-        title = g_strdup_printf (_("%s (on %s)"), name, hostname);
+        title = g_strdup_printf (_("%s%s (on %s)"), c->qubes_vmname, name, hostname);
     }
     else
     {
-        title = g_strdup (name);
+        title = g_strdup_printf ("%s%s", c->qubes_vmname, name);
     }
 
     return title;
@@ -1353,6 +1442,10 @@ clientFree (Client *c)
     {
         g_free (c->hostname);
     }
+    if (c->qubes_vmname)
+    {
+        g_free (c->qubes_vmname);
+    }
     if (c->size)
     {
         XFree (c->size);
@@ -1468,6 +1561,7 @@ static void
 clientUpdateIconPix (Client *c)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
     gint size;
     GdkPixbuf *icon;
     int i;
@@ -1482,12 +1576,13 @@ clientUpdateIconPix (Client *c)
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
     for (i = 0; i < STATE_TOGGLED; i++)
     {
         xfwmPixmapFree (&c->appmenu[i]);
     }
 
-    if (xfwmPixmapNone(&screen_info->buttons[MENU_BUTTON][ACTIVE]))
+    if (xfwmPixmapNone(&decoration->buttons[MENU_BUTTON][ACTIVE]))
     {
         /* The current theme has no menu button */
         return;
@@ -1497,9 +1592,9 @@ clientUpdateIconPix (Client *c)
     {
         filtered_state = i != INACTIVE ? ACTIVE : INACTIVE;
         frame_width = frameTopWidth (c, filtered_state);
-        stretch_pixmap = &screen_info->sides_stretch[SIDE_TOP][filtered_state];
+        stretch_pixmap = &decoration->sides_stretch[SIDE_TOP][filtered_state];
 
-        if (!xfwmPixmapNone(&screen_info->buttons[MENU_BUTTON][i]))
+        if (!xfwmPixmapNone(&decoration->buttons[MENU_BUTTON][i]))
         {
             /* If title is stretched, paint frame with offset instead */
             if (!xfwmPixmapNone (stretch_pixmap))
@@ -1511,8 +1606,8 @@ clientUpdateIconPix (Client *c)
                         stretch_pixmap->width / (double) frame_width, 1);
 
                 xfwmPixmapCreate (screen_info, &c->appmenu[i],
-                        screen_info->buttons[MENU_BUTTON][i].width,
-                        screen_info->buttons[MENU_BUTTON][i].height);
+                        decoration->buttons[MENU_BUTTON][i].width,
+                        decoration->buttons[MENU_BUTTON][i].height);
 
                 if (x < 0) /* RHS */
                 {
@@ -1530,12 +1625,12 @@ clientUpdateIconPix (Client *c)
             }
             else
             {
-                xfwmPixmapDuplicate (&screen_info->buttons[MENU_BUTTON][i], &c->appmenu[i]);
+                xfwmPixmapDuplicate (&decoration->buttons[MENU_BUTTON][i], &c->appmenu[i]);
             }
         }
     }
-    size = MIN (screen_info->buttons[MENU_BUTTON][ACTIVE].width,
-                screen_info->buttons[MENU_BUTTON][ACTIVE].height);
+    size = MIN (decoration->buttons[MENU_BUTTON][ACTIVE].width,
+                decoration->buttons[MENU_BUTTON][ACTIVE].height);
 
     if (size > 1)
     {
@@ -1694,6 +1789,11 @@ clientFrame (DisplayInfo *display_info, Window w, gboolean recapture)
     getTransientFor (display_info, screen_info->xroot, c->window, &c->transient_for);
     XChangeSaveSet(display_info->dpy, c->window, SetModeInsert);
 
+    /* Qubes window decoration */
+    getQubesLabel(c);
+    getQubesVmName(c);
+    clientUpdateName(c);
+
     /* Initialize structure */
     c->size = NULL;
     c->flags = 0L;
@@ -4315,9 +4415,11 @@ xfwmPixmap *
 clientGetButtonPixmap (Client *c, int button, int state)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
 
     TRACE ("button=%i, state=%i", button, state);
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
     switch (button)
     {
         case MENU_BUTTON:
@@ -4329,29 +4431,29 @@ clientGetButtonPixmap (Client *c, int button, int state)
             break;
         case SHADE_BUTTON:
             if (FLAG_TEST (c->flags, CLIENT_FLAG_SHADED)
-                && (!xfwmPixmapNone(&screen_info->buttons[SHADE_BUTTON][state + STATE_TOGGLED])))
+                && (!xfwmPixmapNone(&decoration->buttons[SHADE_BUTTON][state + STATE_TOGGLED])))
             {
-                return &screen_info->buttons[SHADE_BUTTON][state + STATE_TOGGLED];
+                return &decoration->buttons[SHADE_BUTTON][state + STATE_TOGGLED];
             }
             break;
         case STICK_BUTTON:
             if (FLAG_TEST (c->flags, CLIENT_FLAG_STICKY)
-                && (!xfwmPixmapNone(&screen_info->buttons[STICK_BUTTON][state + STATE_TOGGLED])))
+                && (!xfwmPixmapNone(&decoration->buttons[STICK_BUTTON][state + STATE_TOGGLED])))
             {
-                return &screen_info->buttons[STICK_BUTTON][state + STATE_TOGGLED];
+                return &decoration->buttons[STICK_BUTTON][state + STATE_TOGGLED];
             }
             break;
         case MAXIMIZE_BUTTON:
             if (FLAG_TEST (c->flags, CLIENT_FLAG_MAXIMIZED)
-                && (!xfwmPixmapNone(&screen_info->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED])))
+                && (!xfwmPixmapNone(&decoration->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED])))
             {
-                return &screen_info->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED];
+                return &decoration->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED];
             }
             break;
         default:
             break;
     }
-    return &screen_info->buttons[button][state];
+    return &decoration->buttons[button][state];
 }
 
 int
diff --git a/src/client.h b/src/client.h
index c581a2398..47fd0f8de 100644
--- a/src/client.h
+++ b/src/client.h
@@ -323,6 +323,8 @@ struct _Client
     gint struts[STRUTS_SIZE];
     gchar *hostname;
     gchar *name;
+    gchar *qubes_vmname;
+    guint qubes_label_color;
     guint32 user_time;
     GPid pid;
     guint32 ping_time;
diff --git a/src/display.h b/src/display.h
index b44ed384c..13d1daab4 100644
--- a/src/display.h
+++ b/src/display.h
@@ -278,6 +278,7 @@ typedef struct _Client            Client;
 typedef struct _DisplayInfo       DisplayInfo;
 typedef struct _xfwmPixmap        xfwmPixmap;
 typedef struct _XfwmParams        XfwmParams;
+typedef struct _Decoration        Decoration;
 typedef struct _ScreenInfo        ScreenInfo;
 typedef struct _Settings          Settings;
 
diff --git a/src/events.c b/src/events.c
index 33d67ccf8..90fed1829 100644
--- a/src/events.c
+++ b/src/events.c
@@ -1995,13 +1995,17 @@ handleClientMessage (DisplayInfo *display_info, XClientMessageEvent * ev)
         }
         else if (ev->message_type == display_info->atoms[NET_REQUEST_FRAME_EXTENTS])
         {
+            Decoration *decoration;
+            
             TRACE ("window (0x%lx) has received a NET_REQUEST_FRAME_EXTENTS event", ev->window);
+            /* All colors have the same dimensions, use dom0 as that's always present */
+            decoration = getDecorationForColor(c->screen_info, QUBES_LABEL_DOM0);
             /* Size estimate from the decoration extents */
             setNetFrameExtents (display_info, ev->window,
-                                frameDecorationTop (screen_info),
-                                frameDecorationLeft (screen_info),
-                                frameDecorationRight (screen_info),
-                                frameDecorationBottom (screen_info));
+                                frameDecorationTop (decoration),
+                                frameDecorationLeft (decoration),
+                                frameDecorationRight (decoration),
+                                frameDecorationBottom (decoration));
         }
         else if ((ev->message_type == display_info->atoms[MANAGER]) && (ev->format == 32))
         {
diff --git a/src/frame.c b/src/frame.c
index 216d51d72..07aac60ca 100644
--- a/src/frame.c
+++ b/src/frame.c
@@ -73,42 +73,46 @@ frameBorderTop (Client * c)
 static int
 frameCornerWidth (Client * c, int corner, int state)
 {
+    Decoration *decoration;
     g_return_val_if_fail (c != NULL, 0);
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
 
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
     if (FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
         && c->screen_info->params->borderless_maximize)
     {
         return 0;
     }
-    if (!xfwmPixmapNone (&c->screen_info->corners_stretch[corner][state]))
+    if (!xfwmPixmapNone (&decoration->corners_stretch[corner][state]))
     {
-        return c->screen_info->corners_stretch[corner][state].width;
+        return decoration->corners_stretch[corner][state].width;
     }
     else
     {
-        return c->screen_info->corners[corner][state].width;
+        return decoration->corners[corner][state].width;
     }
 }
 
 static int
 frameCornerHeight (Client * c, int corner, int state)
 {
+    Decoration *decoration;
     g_return_val_if_fail (c != NULL, 0);
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
 
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
     if (FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
         && c->screen_info->params->borderless_maximize)
     {
         return 0;
     }
-    if (!xfwmPixmapNone (&c->screen_info->corners_stretch[corner][state]))
+    if (!xfwmPixmapNone (&decoration->corners_stretch[corner][state]))
     {
-        return c->screen_info->corners_stretch[corner][state].height;
+        return decoration->corners_stretch[corner][state].height;
     }
     else
     {
-        return c->screen_info->corners[corner][state].height;
+        return decoration->corners[corner][state].height;
     }
 }
 
@@ -130,6 +134,7 @@ static void
 frameFillTitlePixmap (Client * c, int state, int part, int x, int w, int h, xfwmPixmap * title_pm, xfwmPixmap * top_pm)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
 
     g_return_if_fail (c);
     g_return_if_fail (title_pm);
@@ -137,16 +142,17 @@ frameFillTitlePixmap (Client * c, int state, int part, int x, int w, int h, xfwm
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
 
-    if (!xfwmPixmapNone(&screen_info->top[part][state]))
+    if (!xfwmPixmapNone(&decoration->top[part][state]))
     {
-        xfwmPixmapFill (&screen_info->top[part][state], top_pm, x, 0, w, h, FALSE, FALSE);
+        xfwmPixmapFill (&decoration->top[part][state], top_pm, x, 0, w, h, FALSE, FALSE);
     }
     else
     {
-        xfwmPixmapFill (&screen_info->title[part][state], top_pm, x, 0, w, h, FALSE, FALSE);
+        xfwmPixmapFill (&decoration->title[part][state], top_pm, x, 0, w, h, FALSE, FALSE);
     }
-    xfwmPixmapFill (&screen_info->title[part][state], title_pm, x, 0, w, frameDecorationTop(screen_info), FALSE, FALSE);
+    xfwmPixmapFill (&decoration->title[part][state], title_pm, x, 0, w, frameDecorationTop(decoration), FALSE, FALSE);
 }
 
 static void
@@ -155,6 +161,7 @@ frameDrawTitleText (ScreenInfo * screen_info, cairo_t * cr, PangoLayout * layout
     cairo_translate (cr, x, y);
     if (screen_info->params->title_shadow[state])
     {
+        // TODO?
         gdk_cairo_set_source_rgba (cr, &screen_info->title_shadow_colors[state]);
         if (screen_info->params->title_shadow[state] == TITLE_SHADOW_UNDER)
         {
@@ -183,6 +190,7 @@ static void
 frameCreateTitlePixmap (Client * c, int state, int left, int right, xfwmPixmap * title_pm, xfwmPixmap * top_pm)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
     cairo_surface_t *surface;
     cairo_t *cr;
     PangoLayout *layout;
@@ -197,6 +205,7 @@ frameCreateTitlePixmap (Client * c, int state, int left, int right, xfwmPixmap *
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
 
     if (left > right)
     {
@@ -249,15 +258,15 @@ frameCreateTitlePixmap (Client * c, int state, int left, int right, xfwmPixmap *
     pango_layout_get_pixel_extents (layout, NULL, &logical_rect);
 
     title_height = logical_rect.height;
-    title_y = voffset + (frameDecorationTop(screen_info) - title_height) / 2;
-    if (title_y + title_height > frameDecorationTop(screen_info))
+    title_y = voffset + (frameDecorationTop(decoration) - title_height) / 2;
+    if (title_y + title_height > frameDecorationTop(decoration))
     {
-        title_y = MAX (0, frameDecorationTop(screen_info) - title_height);
+        title_y = MAX (0, frameDecorationTop(decoration) - title_height);
     }
 
-    if (!xfwmPixmapNone(&screen_info->top[3][ACTIVE]))
+    if (!xfwmPixmapNone(&decoration->top[3][ACTIVE]))
     {
-        top_height = screen_info->top[3][ACTIVE].height;
+        top_height = decoration->top[3][ACTIVE].height;
     }
     else if (frameDecorationBorderTop(c->screen_info) > 0)
     {
@@ -265,7 +274,7 @@ frameCreateTitlePixmap (Client * c, int state, int left, int right, xfwmPixmap *
     }
     else
     {
-        top_height = frameDecorationTop(screen_info) / 10 + 1;
+        top_height = frameDecorationTop(decoration) / 10 + 1;
         if (top_height > title_y - 1)
         {
              top_height = MAX (title_y - 1, 0);
@@ -273,8 +282,8 @@ frameCreateTitlePixmap (Client * c, int state, int left, int right, xfwmPixmap *
     }
 
     w1 = 0;
-    w2 = screen_info->title[TITLE_2][state].width;
-    w4 = screen_info->title[TITLE_4][state].width;
+    w2 = decoration->title[TITLE_2][state].width;
+    w4 = decoration->title[TITLE_4][state].width;
 
     if (screen_info->params->full_width_title)
     {
@@ -333,20 +342,20 @@ frameCreateTitlePixmap (Client * c, int state, int left, int right, xfwmPixmap *
     }
 
     xfwmPixmapCreate (screen_info, top_pm, width, top_height);
-    xfwmPixmapCreate (screen_info, title_pm, width, frameDecorationTop(screen_info));
+    xfwmPixmapCreate (screen_info, title_pm, width, frameDecorationTop(decoration));
 
     surface = xfwmPixmapCreateSurface (title_pm, FALSE);
     cr = cairo_create (surface);
 
-    if (!xfwmPixmapNone (&screen_info->sides_stretch[SIDE_TOP][state]))
+    if (!xfwmPixmapNone (&decoration->sides_stretch[SIDE_TOP][state]))
     {
-        xfwmPixmapFill (&screen_info->sides_stretch[SIDE_TOP][state], top_pm, x, 0, width, top_height, TRUE, FALSE);
-        xfwmPixmapFill (&screen_info->sides_stretch[SIDE_TOP][state], title_pm, x, 0, width, frameDecorationTop (screen_info), TRUE, FALSE);
+        xfwmPixmapFill (&decoration->sides_stretch[SIDE_TOP][state], top_pm, x, 0, width, top_height, TRUE, FALSE);
+        xfwmPixmapFill (&decoration->sides_stretch[SIDE_TOP][state], title_pm, x, 0, width, frameDecorationTop (decoration), TRUE, FALSE);
 
         title_x = hoffset + w1 + w2;
 
         cairo_save(cr);
-        cairo_rectangle(cr, title_x, title_y, right - w4, frameDecorationTop (screen_info));
+        cairo_rectangle(cr, title_x, title_y, right - w4, frameDecorationTop (decoration));
         cairo_clip(cr);
 
         frameDrawTitleText (screen_info, cr, layout, state, title_x, title_y);
@@ -497,6 +506,7 @@ static void
 frameSetShape (Client * c, int state, FramePixmap * frame_pix, int button_x[BUTTON_COUNT])
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
     DisplayInfo *display_info;
     XRectangle rect;
     xfwmPixmap *my_pixmap;
@@ -506,6 +516,7 @@ frameSetShape (Client * c, int state, FramePixmap * frame_pix, int button_x[BUTT
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
     display_info = screen_info->display_info;
 
     if (!display_info->have_shape)
@@ -580,15 +591,15 @@ frameSetShape (Client * c, int state, FramePixmap * frame_pix, int button_x[BUTT
         {
             if (xfwmWindowVisible (&c->corners[i]))
             {
-                if (!xfwmPixmapNone (&screen_info->corners_stretch[i][state]))
+                if (!xfwmPixmapNone (&decoration->corners_stretch[i][state]))
                 {
                     XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[i]),
-                                       ShapeBounding, 0, 0, screen_info->corners_stretch[i][state].mask, ShapeSet);
+                                       ShapeBounding, 0, 0, decoration->corners_stretch[i][state].mask, ShapeSet);
                 }
                 else
                 {
                     XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[i]),
-                                       ShapeBounding, 0, 0, screen_info->corners[i][state].mask, ShapeSet);
+                                       ShapeBounding, 0, 0, decoration->corners[i][state].mask, ShapeSet);
                 }
             }
         }
@@ -723,7 +734,7 @@ frameSetShape (Client * c, int state, FramePixmap * frame_pix, int button_x[BUTT
             if (xfwmWindowVisible (&c->buttons[i]))
             {
                 XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding, button_x[i],
-                                    (frameTop (c) - screen_info->buttons[i][state].height + 1) / 2,
+                                    (frameTop (c) - decoration->buttons[i][state].height + 1) / 2,
                                     MYWINDOW_XWINDOW (c->buttons[i]), ShapeBounding, ShapeUnion);
             }
         }
@@ -743,6 +754,7 @@ frameDrawWin (Client * c)
 {
     ScreenInfo *screen_info;
     DisplayInfo *display_info;
+    Decoration *decoration;
     FramePixmap frame_pix;
     xfwmPixmap *my_pixmap;
     gint state, x, button, left, right;
@@ -760,6 +772,7 @@ frameDrawWin (Client * c)
 
     screen_info = c->screen_info;
     display_info = screen_info->display_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
 
     requires_clearing = FALSE;
     width_changed = FALSE;
@@ -840,7 +853,7 @@ frameDrawWin (Client * c)
 
         /* Update icon if present and using a stretched frame */
         if (strchr (screen_info->params->button_layout, getLetterFromButton(MENU_BUTTON, c)) &&
-            !xfwmPixmapNone (&screen_info->sides_stretch[SIDE_TOP][state]))
+            !xfwmPixmapNone (&decoration->sides_stretch[SIDE_TOP][state]))
         {
             clientUpdateIcon (c, TRUE);
         }
@@ -861,7 +874,7 @@ frameDrawWin (Client * c)
             }
             else if (button >= 0)
             {
-                if (x + screen_info->buttons[button][state].width + screen_info->params->button_spacing < right)
+                if (x + decoration->buttons[button][state].width + screen_info->params->button_spacing < right)
                 {
                     my_pixmap = clientGetButtonPixmap (c, button, clientGetButtonState (c, button, state));
                     if (!xfwmPixmapNone(my_pixmap))
@@ -869,11 +882,11 @@ frameDrawWin (Client * c)
                         xfwmWindowSetBG (&c->buttons[button], my_pixmap);
                     }
                     xfwmWindowShow (&c->buttons[button], x,
-                        ((frameDecorationTop(screen_info) - screen_info->buttons[button][state].height + 1) / 2) - frameBorderTop (c),
-                        screen_info->buttons[button][state].width,
-                        screen_info->buttons[button][state].height, TRUE);
+                        ((frameDecorationTop(decoration) - decoration->buttons[button][state].height + 1) / 2) - frameBorderTop (c),
+                        decoration->buttons[button][state].width,
+                        decoration->buttons[button][state].height, TRUE);
                     button_x[button] = x;
-                    x = x + screen_info->buttons[button][state].width +
+                    x = x + decoration->buttons[button][state].width +
                         screen_info->params->button_spacing;
                 }
                 else
@@ -896,19 +909,19 @@ frameDrawWin (Client * c)
             }
             else if (button >= 0)
             {
-                if (x - screen_info->buttons[button][state].width - screen_info->params->button_spacing > left)
+                if (x - decoration->buttons[button][state].width - screen_info->params->button_spacing > left)
                 {
                     my_pixmap = clientGetButtonPixmap (c, button, clientGetButtonState (c, button, state));
                     if (!xfwmPixmapNone(my_pixmap))
                     {
                         xfwmWindowSetBG (&c->buttons[button], my_pixmap);
                     }
-                    x = x - screen_info->buttons[button][state].width -
+                    x = x - decoration->buttons[button][state].width -
                         screen_info->params->button_spacing;
                     xfwmWindowShow (&c->buttons[button], x,
-                        ((frameDecorationTop(screen_info) - screen_info->buttons[button][state].height + 1) / 2) - frameBorderTop (c),
-                        screen_info->buttons[button][state].width,
-                        screen_info->buttons[button][state].height, TRUE);
+                        ((frameDecorationTop(decoration) - decoration->buttons[button][state].height + 1) / 2) - frameBorderTop (c),
+                        decoration->buttons[button][state].width,
+                        decoration->buttons[button][state].height, TRUE);
                     button_x[button] = x;
                 }
                 else
@@ -940,20 +953,20 @@ frameDrawWin (Client * c)
         xfwmWindowSetBG (&c->title, &frame_pix.pm_title);
         xfwmWindowShow (&c->title,
             frameCornerWidth (c, CORNER_TOP_LEFT, state), 0 - frameBorderTop (c), top_width,
-            frameDecorationTop(screen_info), (requires_clearing | width_changed));
+            frameDecorationTop(decoration), (requires_clearing | width_changed));
 
         /* Corners are never resized, we need to update them separately */
         if (requires_clearing)
         {
             for (i = 0; i < CORNER_COUNT; i++)
             {
-                if (!xfwmPixmapNone (&screen_info->corners_stretch[i][state]))
+                if (!xfwmPixmapNone (&decoration->corners_stretch[i][state]))
                 {
-                    xfwmWindowSetBG (&c->corners[i], &screen_info->corners_stretch[i][state]);
+                    xfwmWindowSetBG (&c->corners[i], &decoration->corners_stretch[i][state]);
                 }
                 else
                 {
-                    xfwmWindowSetBG (&c->corners[i], &screen_info->corners[i][state]);
+                    xfwmWindowSetBG (&c->corners[i], &decoration->corners[i][state]);
                 }
             }
         }
@@ -981,16 +994,16 @@ frameDrawWin (Client * c)
             {
                 xfwmPixmapCreate (screen_info, &frame_pix.pm_sides[SIDE_LEFT],
                     frameLeft (c), left_height);
-                if (!xfwmPixmapNone (&screen_info->sides_stretch[SIDE_LEFT][state]))
+                if (!xfwmPixmapNone (&decoration->sides_stretch[SIDE_LEFT][state]))
                 {
-                    xfwmPixmapFill (&screen_info->sides_stretch[SIDE_LEFT][state],
+                    xfwmPixmapFill (&decoration->sides_stretch[SIDE_LEFT][state],
                         &frame_pix.pm_sides[SIDE_LEFT],
                         0, 0, frameLeft (c), left_height,
                         FALSE, TRUE);
                 }
                 else
                 {
-                    xfwmPixmapFill (&screen_info->sides[SIDE_LEFT][state],
+                    xfwmPixmapFill (&decoration->sides[SIDE_LEFT][state],
                         &frame_pix.pm_sides[SIDE_LEFT],
                         0, 0, frameLeft (c), left_height,
                         FALSE, FALSE);
@@ -1002,16 +1015,16 @@ frameDrawWin (Client * c)
 
                 xfwmPixmapCreate (screen_info, &frame_pix.pm_sides[SIDE_RIGHT],
                     frameRight (c), right_height);
-                if (!xfwmPixmapNone (&screen_info->sides_stretch[SIDE_RIGHT][state]))
+                if (!xfwmPixmapNone (&decoration->sides_stretch[SIDE_RIGHT][state]))
                 {
-                    xfwmPixmapFill (&screen_info->sides_stretch[SIDE_RIGHT][state],
+                    xfwmPixmapFill (&decoration->sides_stretch[SIDE_RIGHT][state],
                         &frame_pix.pm_sides[SIDE_RIGHT],
                         0, 0, frameRight (c), right_height,
                         FALSE, TRUE);
                 }
                 else
                 {
-                    xfwmPixmapFill (&screen_info->sides[SIDE_RIGHT][state],
+                    xfwmPixmapFill (&decoration->sides[SIDE_RIGHT][state],
                         &frame_pix.pm_sides[SIDE_RIGHT],
                         0, 0, frameRight (c), right_height,
                         FALSE, FALSE);
@@ -1025,16 +1038,16 @@ frameDrawWin (Client * c)
 
             xfwmPixmapCreate (screen_info, &frame_pix.pm_sides[SIDE_BOTTOM],
                 bottom_width, frameBottom (c));
-            if (!xfwmPixmapNone (&screen_info->sides_stretch[SIDE_BOTTOM][state]))
+            if (!xfwmPixmapNone (&decoration->sides_stretch[SIDE_BOTTOM][state]))
             {
-                xfwmPixmapFill (&screen_info->sides_stretch[SIDE_BOTTOM][state],
+                xfwmPixmapFill (&decoration->sides_stretch[SIDE_BOTTOM][state],
                     &frame_pix.pm_sides[SIDE_BOTTOM],
                     0, 0, bottom_width, frameBottom (c),
                     TRUE, FALSE);
             }
             else
             {
-                xfwmPixmapFill (&screen_info->sides[SIDE_BOTTOM][state],
+                xfwmPixmapFill (&decoration->sides[SIDE_BOTTOM][state],
                     &frame_pix.pm_sides[SIDE_BOTTOM],
                     0, 0, bottom_width, frameBottom (c),
                     FALSE, FALSE);
@@ -1143,66 +1156,66 @@ update_frame_idle_cb (gpointer data)
 }
 
 int
-frameDecorationLeft (ScreenInfo *screen_info)
+frameDecorationLeft (Decoration *decoration)
 {
     TRACE ("entering");
 
-    g_return_val_if_fail (screen_info != NULL, 0);
-    if (!xfwmPixmapNone (&screen_info->sides_stretch[SIDE_LEFT][ACTIVE]))
+    g_return_val_if_fail (decoration != NULL, 0);
+    if (!xfwmPixmapNone (&decoration->sides_stretch[SIDE_LEFT][ACTIVE]))
     {
-        return screen_info->sides_stretch[SIDE_LEFT][ACTIVE].width;
+        return decoration->sides_stretch[SIDE_LEFT][ACTIVE].width;
     }
     else
     {
-        return screen_info->sides[SIDE_LEFT][ACTIVE].width;
+        return decoration->sides[SIDE_LEFT][ACTIVE].width;
     }
 }
 
 int
-frameDecorationRight (ScreenInfo *screen_info)
+frameDecorationRight (Decoration *decoration)
 {
     TRACE ("entering");
 
-    g_return_val_if_fail (screen_info != NULL, 0);
-    if (!xfwmPixmapNone (&screen_info->sides_stretch[SIDE_RIGHT][ACTIVE]))
+    g_return_val_if_fail (decoration != NULL, 0);
+    if (!xfwmPixmapNone (&decoration->sides_stretch[SIDE_RIGHT][ACTIVE]))
     {
-        return screen_info->sides_stretch[SIDE_RIGHT][ACTIVE].width;
+        return decoration->sides_stretch[SIDE_RIGHT][ACTIVE].width;
     }
     else
     {
-        return screen_info->sides[SIDE_RIGHT][ACTIVE].width;
+        return decoration->sides[SIDE_RIGHT][ACTIVE].width;
     }
 }
 
 int
-frameDecorationTop (ScreenInfo *screen_info)
+frameDecorationTop (Decoration *decoration)
 {
     TRACE ("entering");
 
-    g_return_val_if_fail (screen_info != NULL, 0);
-    if (!xfwmPixmapNone (&screen_info->sides_stretch[SIDE_TOP][ACTIVE]))
+    g_return_val_if_fail (decoration != NULL, 0);
+    if (!xfwmPixmapNone (&decoration->sides_stretch[SIDE_TOP][ACTIVE]))
     {
-        return screen_info->sides_stretch[SIDE_TOP][ACTIVE].height;
+        return decoration->sides_stretch[SIDE_TOP][ACTIVE].height;
     }
     else
     {
-        return screen_info->title[TITLE_3][ACTIVE].height;
+        return decoration->title[TITLE_3][ACTIVE].height;
     }
 }
 
 int
-frameDecorationBottom (ScreenInfo *screen_info)
+frameDecorationBottom (Decoration *decoration)
 {
     TRACE ("entering");
 
-    g_return_val_if_fail (screen_info != NULL, 0);
-    if (!xfwmPixmapNone (&screen_info->sides_stretch[SIDE_BOTTOM][ACTIVE]))
+    g_return_val_if_fail (decoration != NULL, 0);
+    if (!xfwmPixmapNone (&decoration->sides_stretch[SIDE_BOTTOM][ACTIVE]))
     {
-        return screen_info->sides_stretch[SIDE_BOTTOM][ACTIVE].height;
+        return decoration->sides_stretch[SIDE_BOTTOM][ACTIVE].height;
     }
     else
     {
-        return screen_info->sides[SIDE_BOTTOM][ACTIVE].height;
+        return decoration->sides[SIDE_BOTTOM][ACTIVE].height;
     }
 }
 
@@ -1219,15 +1232,18 @@ frameTopWidth (Client * c, int state)
 int
 frameLeft (Client * c)
 {
+    Decoration *decoration;
+
     g_return_val_if_fail (c != NULL, 0);
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
 
     if (FLAG_TEST (c->xfwm_flags, XFWM_FLAG_HAS_BORDER)
         && !FLAG_TEST (c->flags, CLIENT_FLAG_FULLSCREEN)
         && (!FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
             || !(c->screen_info->params->borderless_maximize)))
     {
-        return frameDecorationLeft (c->screen_info);
+        return frameDecorationLeft (decoration);
     }
     return 0;
 }
@@ -1235,15 +1251,18 @@ frameLeft (Client * c)
 int
 frameRight (Client * c)
 {
+    Decoration *decoration;
+
     g_return_val_if_fail (c != NULL, 0);
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
 
     if (FLAG_TEST (c->xfwm_flags, XFWM_FLAG_HAS_BORDER)
         && !FLAG_TEST (c->flags, CLIENT_FLAG_FULLSCREEN)
         && (!FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
             || !(c->screen_info->params->borderless_maximize)))
     {
-        return frameDecorationRight (c->screen_info);
+        return frameDecorationRight (decoration);
     }
     return 0;
 }
@@ -1251,12 +1270,15 @@ frameRight (Client * c)
 int
 frameTop (Client * c)
 {
+    Decoration *decoration;
+
     g_return_val_if_fail (c != NULL, 0);
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
 
     if (CLIENT_HAS_FRAME (c))
     {
-        return frameDecorationTop(c->screen_info) - frameBorderTop (c);
+        return frameDecorationTop(decoration) - frameBorderTop (c);
     }
     return 0;
 }
@@ -1264,15 +1286,17 @@ frameTop (Client * c)
 int
 frameBottom (Client * c)
 {
+    Decoration *decoration;
     g_return_val_if_fail (c != NULL, 0);
     TRACE ("client \"%s\" (0x%lx)", c->name, c->window);
 
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
     if (FLAG_TEST (c->xfwm_flags, XFWM_FLAG_HAS_BORDER)
         && !FLAG_TEST (c->flags, CLIENT_FLAG_FULLSCREEN)
         && (!FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
             || !(c->screen_info->params->borderless_maximize)))
     {
-        return frameDecorationBottom (c->screen_info);
+        return frameDecorationBottom (decoration);
     }
     return 0;
 }
@@ -1454,6 +1478,7 @@ frameButtonX (Client * c, int button, int state)
 {
     char b;
     ScreenInfo *screen_info;
+    Decoration *decoration;
     gint check_button;
     guint i, j;
     gint x;
@@ -1462,6 +1487,7 @@ frameButtonX (Client * c, int button, int state)
 
     screen_info = c->screen_info;
     b = getLetterFromButton (button, c);
+    decoration = getDecorationForColor(c->screen_info, c->qubes_label_color);
 
     if ((!b) || !strchr (screen_info->params->button_layout, b))
     {
@@ -1490,7 +1516,7 @@ frameButtonX (Client * c, int button, int state)
             return x;
         }
 
-        x += screen_info->buttons[check_button][state].width +
+        x += decoration->buttons[check_button][state].width +
             screen_info->params->button_spacing;
     }
 
@@ -1513,11 +1539,11 @@ frameButtonX (Client * c, int button, int state)
 
         if (check_button == button)
         {
-            x -= screen_info->buttons[check_button][state].width;
+            x -= decoration->buttons[check_button][state].width;
             return x;
         }
 
-        x -= screen_info->buttons[check_button][state].width -
+        x -= decoration->buttons[check_button][state].width -
             screen_info->params->button_spacing;
     }
 
diff --git a/src/frame.h b/src/frame.h
index bf0238358..e94df0266 100644
--- a/src/frame.h
+++ b/src/frame.h
@@ -32,10 +32,10 @@
 #include "mypixmap.h"
 #include "client.h"
 
-int                      frameDecorationLeft                    (ScreenInfo *);
-int                      frameDecorationRight                   (ScreenInfo *);
-int                      frameDecorationTop                     (ScreenInfo *);
-int                      frameDecorationBottom                  (ScreenInfo *);
+int                      frameDecorationLeft                    (Decoration *);
+int                      frameDecorationRight                   (Decoration *);
+int                      frameDecorationTop                     (Decoration *);
+int                      frameDecorationBottom                  (Decoration *);
 int                      frameTopWidth                          (Client *,
                                                                  int);
 int                      frameLeft                              (Client *);
diff --git a/src/moveresize.c b/src/moveresize.c
index 468215e6b..91ca2f628 100644
--- a/src/moveresize.c
+++ b/src/moveresize.c
@@ -785,10 +785,12 @@ static gboolean
 clientMoveTile (Client *c, XfwmEventMotion *event)
 {
     ScreenInfo *screen_info;
+    Decoration *decoration;
     GdkRectangle rect;
     int x, y, disp_x, disp_y, disp_max_x, disp_max_y, dist, dist_corner;
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
 
     /* We cannot tile windows if wrapping is enabled */
     if (!screen_info->params->tile_on_move || screen_info->params->wrap_windows)
@@ -805,7 +807,7 @@ clientMoveTile (Client *c, XfwmEventMotion *event)
     disp_max_x = rect.x + rect.width;
     disp_max_y = rect.y + rect.height;
 
-    dist = MIN (TILE_DISTANCE, frameDecorationTop (screen_info) / 2);
+    dist = MIN (TILE_DISTANCE, frameDecorationTop (decoration) / 2);
     dist_corner = (MIN (disp_max_x, disp_max_y)) / BORDER_TILE_LENGTH_RELATIVE;
 
     /* make sure the mouse position is inside the screen edges */
diff --git a/src/mypixmap.c b/src/mypixmap.c
index ee22c5f70..fc62dd6e5 100644
--- a/src/mypixmap.c
+++ b/src/mypixmap.c
@@ -44,6 +44,7 @@
 #include <gdk/gdkx.h>
 #include <cairo/cairo-xlib.h>
 #include <libxfce4util/libxfce4util.h>
+#include <gtk/gtk.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
@@ -525,7 +526,7 @@ file_buffer (enum buf_op op, gpointer handle)
 
 /* This function does all the work. */
 static GdkPixbuf *
-pixbuf_create_from_xpm (gpointer handle, xfwmColorSymbol *color_sym)
+pixbuf_create_from_xpm (gpointer handle, xfwmColorSymbol *color_sym, gboolean override, gdouble override_h, gdouble override_s, gdouble override_v)
 {
     gchar pixel_str[32];
     const gchar *buffer;
@@ -615,6 +616,18 @@ pixbuf_create_from_xpm (gpointer handle, xfwmColorSymbol *color_sym)
             color->red = 0;
             color->green = 0;
             color->blue = 0;
+        } else if (override) {
+            gdouble h, s, v, new_r, new_g, new_b;
+            /* override color - for Qubes labels */
+            gtk_rgb_to_hsv(
+                    1.0*color->red/0xFFFF,
+                    1.0*color->green/0xFFFF,
+                    1.0*color->blue/0xFFFF,
+                    &h, &s, &v);
+            gtk_hsv_to_rgb(override_h, override_s, v, &new_r, &new_g, &new_b);
+            color->red = new_r*0xFFFF;
+            color->green = new_g*0xFFFF;
+            color->blue = new_b*0xFFFF;
         }
 
         g_free (color_name);
@@ -686,7 +699,8 @@ pixbuf_create_from_xpm (gpointer handle, xfwmColorSymbol *color_sym)
 
 
 static GdkPixbuf *
-xpm_image_load (const char *filename, xfwmColorSymbol *color_sym)
+xpm_image_load (const char *filename, xfwmColorSymbol *color_sym,
+        gboolean override, gdouble override_h, gdouble override_s, gdouble override_v)
 {
     guchar buffer[1024];
     GdkPixbuf *pixbuf;
@@ -712,7 +726,8 @@ xpm_image_load (const char *filename, xfwmColorSymbol *color_sym)
     fseek (f, 0, SEEK_SET);
     memset (&h, 0, sizeof (h));
     h.infile = f;
-    pixbuf = pixbuf_create_from_xpm (&h, color_sym);
+    pixbuf = pixbuf_create_from_xpm (&h, color_sym, override,
+            override_h, override_s, override_v);
     g_free (h.buffer);
     fclose (f);
 
@@ -964,7 +979,7 @@ xfwmPixmapRenderGdkPixbuf (xfwmPixmap * pm, GdkPixbuf *pixbuf)
 }
 
 gboolean
-xfwmPixmapLoad (ScreenInfo * screen_info, xfwmPixmap * pm, const gchar * dir, const gchar * file, xfwmColorSymbol * cs)
+xfwmPixmapLoad (ScreenInfo * screen_info, xfwmPixmap * pm, const gchar * dir, const gchar * file, xfwmColorSymbol * cs, guint label_color)
 {
     gchar *filename;
     gchar *filexpm;
@@ -984,7 +999,17 @@ xfwmPixmapLoad (ScreenInfo * screen_info, xfwmPixmap * pm, const gchar * dir, co
     filexpm = g_strdup_printf ("%s.%s", file, "xpm");
     filename = g_build_filename (dir, filexpm, NULL);
     g_free (filexpm);
-    pixbuf = xpm_image_load (filename, cs);
+    if (label_color != 0xFFFFFFFF) {
+        gdouble h, s, v;
+        gtk_rgb_to_hsv(
+                1.0*((label_color & 0xFF0000) >> 16)/0xFF,
+                1.0*((label_color & 0x00FF00) >>  8)/0xFF,
+                1.0*((label_color & 0x0000FF) >>  0)/0xFF,
+                &h, &s, &v);
+        pixbuf = xpm_image_load (filename, cs, TRUE, h, s, v);
+    } else {
+        pixbuf = xpm_image_load (filename, cs, FALSE, 0, 0, 0);
+    }
     g_free (filename);
 
     /* Compose with other image formats, if any available. */
diff --git a/src/mypixmap.h b/src/mypixmap.h
index bb1030e8d..269f3b6e6 100644
--- a/src/mypixmap.h
+++ b/src/mypixmap.h
@@ -62,7 +62,8 @@ gboolean                 xfwmPixmapLoad                         (ScreenInfo *,
                                                                  xfwmPixmap *,
                                                                  const gchar *,
                                                                  const gchar *,
-                                                                 xfwmColorSymbol *);
+                                                                 xfwmColorSymbol *,
+                                                                 guint label_color);
 void                     xfwmPixmapCreate                       (ScreenInfo *,
                                                                  xfwmPixmap *,
                                                                  gint,
diff --git a/src/placement.c b/src/placement.c
index 65ee98801..9d5719637 100644
--- a/src/placement.c
+++ b/src/placement.c
@@ -335,6 +335,7 @@ clientConstrainPos (Client * c, gboolean show_full)
 {
     Client *c2;
     ScreenInfo *screen_info;
+    Decoration *decoration;
     guint i;
     gint frame_top, frame_left;
     gint title_visible;
@@ -349,6 +350,7 @@ clientConstrainPos (Client * c, gboolean show_full)
         show_full ? "(with show full)" : "(w/out show full)");
 
     screen_info = c->screen_info;
+    decoration = getDecorationForColor(screen_info, c->qubes_label_color);
 
     /* We use a bunch of local vars to reduce the overhead of calling other functions all the time */
     frame_top = frameExtentTop (c);
@@ -359,7 +361,7 @@ clientConstrainPos (Client * c, gboolean show_full)
     if (title_visible <= 0)
     {
         /* CSD window, use the title height from the theme */
-        title_visible = frameDecorationTop (screen_info);
+        title_visible = frameDecorationTop (decoration);
     }
     min_visible = MAX (title_visible, CLIENT_MIN_VISIBLE);
     ret = 0;
diff --git a/src/screen.c b/src/screen.c
index 6161e30d2..15bb33d5b 100644
--- a/src/screen.c
+++ b/src/screen.c
@@ -167,7 +167,7 @@ myScreenInit (DisplayInfo *display_info, GdkScreen *gscr, unsigned long event_ma
     GdkWindow *event_win;
     PangoLayout *layout;
     long desktop_visible;
-    int i, j;
+    int i, j, k;
 
     g_return_val_if_fail (display_info, NULL);
     g_return_val_if_fail (GDK_IS_SCREEN (gscr), NULL);
@@ -299,36 +299,8 @@ myScreenInit (DisplayInfo *display_info, GdkScreen *gscr, unsigned long event_ma
     screen_info->pango_attr_list = NULL;
     screen_info->box_gc = None;
 
-    for (i = 0; i < SIDE_COUNT; i++)
-    {
-        xfwmPixmapInit (screen_info, &screen_info->sides[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->sides[i][INACTIVE]);
-        
-        xfwmPixmapInit (screen_info, &screen_info->sides_stretch[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->sides_stretch[i][INACTIVE]);
-    }
-    for (i = 0; i < CORNER_COUNT; i++)
-    {
-        xfwmPixmapInit (screen_info, &screen_info->corners[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->corners[i][INACTIVE]);
-
-        xfwmPixmapInit (screen_info, &screen_info->corners_stretch[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->corners_stretch[i][INACTIVE]);
-    }
-    for (i = 0; i < BUTTON_COUNT; i++)
-    {
-        for (j = 0; j < STATE_COUNT; j++)
-        {
-            xfwmPixmapInit (screen_info, &screen_info->buttons[i][j]);
-        }
-    }
-    for (i = 0; i < TITLE_COUNT; i++)
-    {
-        xfwmPixmapInit (screen_info, &screen_info->title[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->title[i][INACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->top[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->top[i][INACTIVE]);
-    }
+    screen_info->decoration = g_hash_table_new_full(NULL, NULL,
+            NULL, (GDestroyNotify)unloadSingleDecoration);
 
     screen_info->monitors_index = NULL;
     myScreenInvalidateMonitorCache (screen_info);
diff --git a/src/screen.h b/src/screen.h
index c719012f5..cf03da208 100644
--- a/src/screen.h
+++ b/src/screen.h
@@ -62,6 +62,8 @@
                                  HyperMask)
 
 
+#define XPM_COLOR_SYMBOL_SIZE   24
+
 #ifdef HAVE_COMPOSITOR
 
 #ifdef HAVE_PRESENT_EXTENSION
@@ -87,6 +89,17 @@ typedef enum
     VBLANK_ERROR,
 } vblankMode;
 
+struct _Decoration
+{
+    xfwmPixmap buttons[BUTTON_COUNT][STATE_COUNT];
+    xfwmPixmap corners[CORNER_COUNT][2];
+    xfwmPixmap sides[SIDE_COUNT][2];
+    xfwmPixmap title[TITLE_COUNT][2];
+    xfwmPixmap top[TITLE_COUNT][2];
+    xfwmPixmap corners_stretch[CORNER_COUNT][2];
+    xfwmPixmap sides_stretch[SIDE_COUNT][2];
+};
+
 struct _ScreenInfo
 {
     /* The display this screen belongs to */
@@ -105,13 +118,10 @@ struct _ScreenInfo
     /* Theme pixmaps and other params, per screen */
     GdkRGBA title_colors[2];
     GdkRGBA title_shadow_colors[2];
-    xfwmPixmap buttons[BUTTON_COUNT][STATE_COUNT];
-    xfwmPixmap corners[CORNER_COUNT][2];
-    xfwmPixmap sides[SIDE_COUNT][2];
-    xfwmPixmap title[TITLE_COUNT][2];
-    xfwmPixmap top[TITLE_COUNT][2];
-    xfwmPixmap corners_stretch[CORNER_COUNT][2];
-    xfwmPixmap sides_stretch[SIDE_COUNT][2];
+    GdkRGBA qubes_label_colors[MAX_QUBES_LABELS];
+    xfwmColorSymbol colsym[ XPM_COLOR_SYMBOL_SIZE + 1 ];
+    /* hash table label_color->Decoration* */
+    GHashTable *decoration;
 
     /* Per screen graphic contexts */
     GC box_gc;
diff --git a/src/settings.c b/src/settings.c
index 385c680c2..44dd3b011 100644
--- a/src/settings.c
+++ b/src/settings.c
@@ -46,7 +46,6 @@
 
 #define CHANNEL_XFWM            "xfwm4"
 #define THEMERC                 "themerc"
-#define XPM_COLOR_SYMBOL_SIZE   24
 
 #define KEYMAP_UPDATE_TIMEOUT   250 /* ms */
 static guint keymap_timeout   = 0;
@@ -278,10 +277,8 @@ getThemeName (ScreenInfo *screen_info, Settings *rc)
     return DEFAULT_HDPI_THEME;
 }
 
-static void
-loadTheme (ScreenInfo *screen_info, Settings *rc)
+Decoration *getDecorationForColor(ScreenInfo *screen_info, guint32 color)
 {
-
     static const char *side_names[] = {
         "left",
         "right",
@@ -315,6 +312,119 @@ loadTheme (ScreenInfo *screen_info, Settings *rc)
         "toggled-prelight",
         "toggled-pressed"
     };
+    Decoration *decoration;
+    gchar imagename[30];
+    gchar *theme;
+    guint i, j;
+
+    decoration = g_hash_table_lookup(screen_info->decoration, GINT_TO_POINTER(color));
+    if (decoration)
+        return decoration;
+
+    decoration = g_new(Decoration, 1);
+    theme = screen_info->params->theme;
+
+    for (i = 0; i < SIDE_COUNT; i++)
+    {
+        xfwmPixmapInit (screen_info, &decoration->sides[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->sides[i][INACTIVE]);
+
+        xfwmPixmapInit (screen_info, &decoration->sides_stretch[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->sides_stretch[i][INACTIVE]);
+    }
+    for (i = 0; i < CORNER_COUNT; i++)
+    {
+        xfwmPixmapInit (screen_info, &decoration->corners[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->corners[i][INACTIVE]);
+
+        xfwmPixmapInit (screen_info, &decoration->corners_stretch[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->corners_stretch[i][INACTIVE]);
+    }
+    for (i = 0; i < BUTTON_COUNT; i++)
+    {
+        for (j = 0; j < STATE_COUNT; j++)
+        {
+            xfwmPixmapInit (screen_info, &decoration->buttons[i][j]);
+        }
+    }
+    for (i = 0; i < TITLE_COUNT; i++)
+    {
+        xfwmPixmapInit (screen_info, &decoration->title[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->title[i][INACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->top[i][ACTIVE]);
+        xfwmPixmapInit (screen_info, &decoration->top[i][INACTIVE]);
+    }
+
+    for (i = 0; i < SIDE_COUNT; i++)
+    {
+        if (i == SIDE_TOP)
+            continue;  /* There is no top decoration per se. */
+
+        g_snprintf(imagename, sizeof (imagename), "%s-active", side_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->sides[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "%s-inactive", side_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->sides[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+
+        /* stretch bitmap alternatives */
+        g_snprintf(imagename, sizeof (imagename), "%s-active-stretch", side_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->sides_stretch[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "%s-inactive-stretch", side_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->sides_stretch[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+    }
+    for (i = 0; i < CORNER_COUNT; i++)
+    {
+        g_snprintf(imagename, sizeof (imagename), "%s-active", corner_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->corners[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "%s-inactive", corner_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->corners[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+
+        /* stretch bitmap alternatives */
+        g_snprintf(imagename, sizeof (imagename), "%s-active-stretch", corner_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->corners_stretch[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "%s-inactive-stretch", corner_names[i]);
+        xfwmPixmapLoad (screen_info, &decoration->corners_stretch[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+    }
+    for (i = 0; i < BUTTON_COUNT; i++)
+    {
+        for (j = 0; j < STATE_COUNT; j++)
+        {
+            g_snprintf(imagename, sizeof (imagename), "%s-%s", button_names[i], button_state_names[j]);
+            xfwmPixmapLoad (screen_info, &decoration->buttons[i][j], theme, imagename, screen_info->colsym, color);
+        }
+    }
+    for (i = 0; i < TITLE_COUNT; i++)
+    {
+        g_snprintf(imagename, sizeof (imagename), "title-%d-active", i + 1);
+        xfwmPixmapLoad (screen_info, &decoration->title[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "title-%d-inactive", i + 1);
+        xfwmPixmapLoad (screen_info, &decoration->title[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "top-%d-active", i + 1);
+        xfwmPixmapLoad (screen_info, &decoration->top[i][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+        g_snprintf(imagename, sizeof (imagename), "top-%d-inactive", i + 1);
+        xfwmPixmapLoad (screen_info, &decoration->top[i][INACTIVE], theme, imagename, screen_info->colsym, color);
+    }
+
+    g_strlcpy (imagename, "title-active-stretch", sizeof (imagename));
+    xfwmPixmapLoad (screen_info, &decoration->sides_stretch[SIDE_TOP][ACTIVE], theme, imagename, screen_info->colsym, color);
+
+    g_strlcpy (imagename, "title-inactive-stretch", sizeof (imagename));
+    xfwmPixmapLoad (screen_info, &decoration->sides_stretch[SIDE_TOP][INACTIVE], theme, imagename, screen_info->colsym, color);
+
+
+    g_hash_table_insert(screen_info->decoration, GINT_TO_POINTER(color), decoration);
+    return decoration;
+}
+
+static void
+loadTheme (ScreenInfo *screen_info, Settings *rc)
+{
 
     static const char *ui_part[] = {
         "fg",
@@ -372,11 +482,9 @@ loadTheme (ScreenInfo *screen_info, Settings *rc)
         NULL
     };
 
-    gchar imagename[30];
     GValue tmp_val = { 0, };
     GValue tmp_val2 = { 0, };
     DisplayInfo *display_info;
-    xfwmColorSymbol colsym[ XPM_COLOR_SYMBOL_SIZE + 1 ];
     GtkWidget *widget;
     gchar *theme;
     const gchar *font;
@@ -432,11 +540,13 @@ loadTheme (ScreenInfo *screen_info, Settings *rc)
 
     for (i = 0; i < XPM_COLOR_SYMBOL_SIZE; i++)
     {
-        colsym[i].name = rc[i].option;
-        colsym[i].value = g_value_get_string(rc[i].value);
+        g_free(screen_info->colsym[i].name);
+        g_free(screen_info->colsym[i].value);
+        screen_info->colsym[i].name = g_strdup(rc[i].option);
+        screen_info->colsym[i].value = g_strdup(g_value_get_string(rc[i].value));
     }
-    colsym[XPM_COLOR_SYMBOL_SIZE].name = NULL;
-    colsym[XPM_COLOR_SYMBOL_SIZE].value = NULL;
+    screen_info->colsym[XPM_COLOR_SYMBOL_SIZE].name = NULL;
+    screen_info->colsym[XPM_COLOR_SYMBOL_SIZE].value = NULL;
 
     /* Standard double click time ... */
     display_info->double_click_time = abs (getIntValue ("double_click_time", rc));
@@ -468,69 +578,6 @@ loadTheme (ScreenInfo *screen_info, Settings *rc)
     gdk_rgba_parse (&screen_info->title_shadow_colors[ACTIVE], getStringValue ("active_text_shadow_color", rc));
     gdk_rgba_parse (&screen_info->title_shadow_colors[INACTIVE], getStringValue ("inactive_text_shadow_color", rc));
 
-    for (i = 0; i < SIDE_COUNT; i++)
-    {
-        if (i == SIDE_TOP)
-            continue;  /* There is no top decoration per se. */
-
-        g_snprintf(imagename, sizeof (imagename), "%s-active", side_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->sides[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "%s-inactive", side_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->sides[i][INACTIVE], theme, imagename, colsym);
-
-        /* stretch bitmap alternatives */
-        g_snprintf(imagename, sizeof (imagename), "%s-active-stretch", side_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->sides_stretch[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "%s-inactive-stretch", side_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->sides_stretch[i][INACTIVE], theme, imagename, colsym);
-    }
-    for (i = 0; i < CORNER_COUNT; i++)
-    {
-        g_snprintf(imagename, sizeof (imagename), "%s-active", corner_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->corners[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "%s-inactive", corner_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->corners[i][INACTIVE], theme, imagename, colsym);
-
-        /* stretch bitmap alternatives */
-        g_snprintf(imagename, sizeof (imagename), "%s-active-stretch", corner_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->corners_stretch[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "%s-inactive-stretch", corner_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->corners_stretch[i][INACTIVE], theme, imagename, colsym);
-    }
-    for (i = 0; i < BUTTON_COUNT; i++)
-    {
-        for (j = 0; j < STATE_COUNT; j++)
-        {
-            g_snprintf(imagename, sizeof (imagename), "%s-%s", button_names[i], button_state_names[j]);
-            xfwmPixmapLoad (screen_info, &screen_info->buttons[i][j], theme, imagename, colsym);
-        }
-    }
-    for (i = 0; i < TITLE_COUNT; i++)
-    {
-        g_snprintf(imagename, sizeof (imagename), "title-%d-active", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->title[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "title-%d-inactive", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->title[i][INACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "top-%d-active", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->top[i][ACTIVE], theme, imagename, colsym);
-
-        g_snprintf(imagename, sizeof (imagename), "top-%d-inactive", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->top[i][INACTIVE], theme, imagename, colsym);
-    }
-
-    /* title stretch bitmap */
-    g_strlcpy (imagename, "title-active-stretch", sizeof (imagename));
-    xfwmPixmapLoad (screen_info, &screen_info->sides_stretch[SIDE_TOP][ACTIVE], theme, imagename, colsym);
-
-    g_strlcpy (imagename, "title-inactive-stretch", sizeof (imagename));
-    xfwmPixmapLoad (screen_info, &screen_info->sides_stretch[SIDE_TOP][INACTIVE], theme, imagename, colsym);
-
     screen_info->box_gc = createGC (screen_info, "#FFFFFF", GXxor, NULL, 2, TRUE);
 
     if (!g_ascii_strcasecmp ("left", getStringValue ("title_alignment", rc)))
@@ -563,7 +610,9 @@ loadTheme (ScreenInfo *screen_info, Settings *rc)
     screen_info->params->title_horizontal_offset =
         getIntValue ("title_horizontal_offset", rc);
 
-    g_free (theme);
+    if (screen_info->params->theme)
+        g_free (screen_info->params->theme);
+    screen_info->params->theme = theme;
 }
 
 static void
@@ -937,49 +986,61 @@ loadSettings (ScreenInfo *screen_info)
     return TRUE;
 }
 
-static void
-unloadTheme (ScreenInfo *screen_info)
+void
+unloadSingleDecoration (Decoration *decoration)
 {
     int i, j;
 
     TRACE ("entering");
 
-    if (screen_info->font_desc != NULL)
-    {
-        pango_font_description_free (screen_info->font_desc);
-        screen_info->font_desc = NULL;
-    }
-
     for (i = 0; i < SIDE_COUNT; i++)
     {
-        xfwmPixmapFree (&screen_info->sides[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->sides[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->sides[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->sides[i][INACTIVE]);
 
-        xfwmPixmapFree (&screen_info->sides_stretch[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->sides_stretch[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->sides_stretch[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->sides_stretch[i][INACTIVE]);
     }
     for (i = 0; i < CORNER_COUNT; i++)
     {
-        xfwmPixmapFree (&screen_info->corners[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->corners[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->corners[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->corners[i][INACTIVE]);
 
-        xfwmPixmapFree (&screen_info->corners_stretch[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->corners_stretch[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->corners_stretch[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->corners_stretch[i][INACTIVE]);
     }
     for (i = 0; i < BUTTON_COUNT; i++)
     {
         for (j = 0; j < STATE_COUNT; j++)
         {
-            xfwmPixmapFree (&screen_info->buttons[i][j]);
+            xfwmPixmapFree (&decoration->buttons[i][j]);
         }
     }
     for (i = 0; i < TITLE_COUNT; i++)
     {
-        xfwmPixmapFree (&screen_info->title[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->title[i][INACTIVE]);
-        xfwmPixmapFree (&screen_info->top[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->top[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->title[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->title[i][INACTIVE]);
+        xfwmPixmapFree (&decoration->top[i][ACTIVE]);
+        xfwmPixmapFree (&decoration->top[i][INACTIVE]);
     }
+}
+
+static void
+unloadTheme (ScreenInfo *screen_info)
+{
+    TRACE ("entering");
+
+    if (screen_info->font_desc != NULL)
+    {
+        pango_font_description_free (screen_info->font_desc);
+        screen_info->font_desc = NULL;
+    }
+
+    g_hash_table_remove_all(screen_info->decoration);
+
+    g_free(screen_info->params->theme);
+    screen_info->params->theme = NULL;
+
     if (screen_info->box_gc != None)
     {
         XFreeGC (myScreenGetXDisplay (screen_info), screen_info->box_gc);
diff --git a/src/settings.h b/src/settings.h
index 612ee2e8a..4c2a40b2d 100644
--- a/src/settings.h
+++ b/src/settings.h
@@ -168,6 +168,33 @@ enum
     PLACE_CENTER
 };
 
+enum
+{
+    QUBES_LABEL_DOM0 = 0,
+    QUBES_LABEL_RED = 1,
+    QUBES_LABEL_ORANGE = 2,
+    QUBES_LABEL_YELLOW = 3,
+    QUBES_LABEL_GREEN = 4,
+    QUBES_LABEL_GRAY = 5,
+    QUBES_LABEL_BLUE = 6,
+    QUBES_LABEL_PURPLE = 7,
+    QUBES_LABEL_BLACK = 8,
+    MAX_QUBES_LABELS = 9
+};
+
+/* RGB values */
+static const guint qubes_label_colors[] = {
+    0xFFFFFFFF, /* QUBES_LABEL_DOM0 */
+    0xcc0000,   /* QUBES_LABEL_RED */
+    0xf57900,   /* QUBES_LABEL_ORANGE */
+    0xedd400,   /* QUBES_LABEL_YELLOW */
+    0x73d216,   /* QUBES_LABEL_GREEN */
+    0x555753,   /* QUBES_LABEL_GRAY */
+    0x3465a4,   /* QUBES_LABEL_BLUE */
+    0x75507b,   /* QUBES_LABEL_PURPLE */
+    0x000000,   /* QUBES_LABEL_BLACK */
+};
+
 struct _Settings
 {
     gchar  *option;
@@ -204,6 +231,7 @@ struct _XfwmParams
     int shadow_delta_y;
     int shadow_opacity;
     int snap_width;
+    gchar *theme;
     int title_alignment;
     int title_horizontal_offset;
     int title_shadow[2];
@@ -259,5 +287,9 @@ gboolean                 reloadSettings                         (DisplayInfo *,
                                                                  int);
 gboolean                 initSettings                           (ScreenInfo *);
 void                     closeSettings                          (ScreenInfo *);
+void                     unloadSingleDecoration                 (Decoration *decoration);
+Decoration *getDecorationForColor(ScreenInfo *screen_info, guint32 color);
+
+#define QUBES_LABEL_DOM0 0xFFFFFFFF
 
 #endif /* INC_SETTINGS_H */
-- 
2.48.1

